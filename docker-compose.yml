version: '3.8'

services:
  gateway:
    build:
      context: .
      dockerfile: src/Gateway/Dockerfile
    container_name: ocelot-gateway
    ports:
      - "7777:7777"
    environment:
      - ASPNETCORE_URLS=http://+:7777
    depends_on:
      - sales-api
      - sales-api-worker
    networks:
      - sales-network

  sales-api:
    build:
      context: .
      dockerfile: src/SalesApi/SalesApi.WebApi/Dockerfile
    container_name: sales-api
    depends_on:
      - postgres
      - mongodb
      - rabbitmq
    ports:
      - "8090:8090"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8090
    networks:
      - sales-network

  sales-api-worker:
    build:
      context: .
      dockerfile: src/SalesApi/SalesApi.Worker/Dockerfile
    container_name: sales-api-worker
    depends_on:
        - postgres
        - mongodb
        - rabbitmq
    ports:
      - "8091:8091"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8091
    networks:
      - sales-network

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: salesapi-db-sql
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - sales-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:4.4
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - sales-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: salesapi-rabbitmq
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - sales-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  sales-network:
    driver: bridge

volumes:
  postgres-data:
  mongodb-data:
  rabbitmq_data:  
